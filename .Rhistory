y="Scale Free Topology Model Fit, signed R^2", title = "Scale Independence", tag = "A")+
theme_classic()+
geom_vline(xintercept = 8, color="red") # Red line corresponds to using an R^2 cut-off
# Mean connectivity as a function of the soft-thresholding power
p2 <- ggplot(data = as.data.frame(sft_thresh),
aes (x = sft_thresh$fitIndices[,1],
y = sft_thresh$fitIndices[,5],
label = trial_powers)) +
geom_label()+
# the sign expression returns the vector of signs of estimated slopes, multiplied by the correlation coefficient.
labs( x="Soft Threshold (power)",
y="Mean Connectivity", title = "Mean Connectivity", tag = "B")+
theme_classic()
plot_grid(p1,p2,ncol=2)
## Now we generate adjacency values and TOM similarity matrices on the basis of selected softpower.
softPower = 7;
#calclute the adjacency matrix
adj= adjacency(exprdata,
type = "unsigned",
power = softPower);
#turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM = TOMsimilarityFromExpr(exprdata,
networkType = "unsigned",
TOMType = "unsigned",
power = softPower);
colnames(TOM) = rownames(TOM) = names(exprdata) # same rows as columns, therefore adjacency.
dissTOM=1-TOM # "distance/ dissimilarity = 1 - similarity"
#hierarchical clustering of the genes based on the TOM dissimilarity measure
library(flashClust)
geneTree = flashClust(as.dist(dissTOM),
method="average")
#plot the resulting clustering tree (dendrogram)
plot(geneTree,
xlab="",
sub="",
cex=0.3)
sample_tree <- as.dendrogram(hclust(dist(exprdata), method = "average"))
dplot <- ggdendrogram(data= sample_tree, rotate = FALSE)+
theme_dendro()+
ggtitle("Sample clustering to detect outliers")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Samples")+
geom_label()
print(dplot)
#hierarchical clustering of the genes based on the TOM dissimilarity measure
library(flashClust)
gene_tree = flashClust(as.dist(dissTOM),
method="average")
#plot the resulting clustering tree (dendrogram)
plot(gene_tree,
xlab="",
sub="",
cex=0.3)
sample_tree <- as.dendrogram(hclust(dist(exprdata), method = "average"))
dplot <- ggdendrogram(data= sample_tree, rotate = FALSE)+
theme_dendro()+
ggtitle("Sample clustering to detect outliers")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Samples")+
geom_label()
print(dplot)
# Set the minimum module size
min_mod_size = 20;
# Module identification using dynamic tree cut
dynamic_mods = cutreeDynamic(dendro = gene_tree,
method="tree",
minClusterSize = min_mod_size);
#dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM, method="hybrid", deepSplit = 2, pamRespectsDendro = FALSE, minClusterSize = minModuleSize);
#the following command gives the module labels and the size of each module. Lable 0 is reserved for unassigned genes
table(dynamic_mods)
# Set the minimum module size
min_mod_size = 20;
# Module identification using dynamic tree cut
dynamic_mods = cutreeDynamic(dendro = gene_tree,
method="tree",
minClusterSize = min_mod_size);
dynamic_mods1 = cutreeDynamic(dendro = gene_tree,
distM = dissTOM,
method="hybrid",
deepSplit = 2,
pamRespectsDendro = FALSE,
minClusterSize = min_mod_size);
#the following command gives the module labels and the size of each module. Lable 0 is reserved for unassigned genes
table(dynamic_mods)
table(dynamic_mods1)
# Set the minimum module size
min_mod_size = 20
# Module identification using dynamic tree cut
dynamic_mods = cutreeDynamic(dendro = gene_tree,
method="tree",
minClusterSize = min_mod_size)
dynamic_mods1 = cutreeDynamic(dendro = gene_tree,
distM = dissTOM,
method="hybrid",
deepSplit = 2,
pamRespectsDendro = FALSE,
minClusterSize = min_mod_size)
## we could highlight module labels and the size(number of nodes) of each module. Label 0 is reserved for unassigned genes that are in essence independent nodes.
table(dynamic_mods)
table(dynamic_mods1)
## we can conveniently assign colors to these labels. "Gray" is assigned to label 0.
dynamic_mod_colors = labels2colors(dynamic_mods)
table(dynamic_mod_colors)
dynamic_mod_colors1 = labels2colors(dynamic_mods1)
table(dynamic_mod_colors1)
plotDendroAndColors(gene_tree,
dynamic_mod_colors,
"Dynamic Tree Cut",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
main = "Gene dendrogram and module colors")
## discard the unassigned genes, and focus on the rest
rest_genes= (dynamic_mod_colors != "gray")
diss1 = 1 - TOMsimilarityFromExpr(exprdata[,rest_genes],
power = softPower)
## discard the unassigned genes, and focus on the rest
rest_genes= (dynamic_mod_colors != "gray")
dissTOM1 = 1 - TOMsimilarityFromExpr(exprdata[,rest_genes],
power = softPower)
names(exprdata)
rest_genes= (dynamic_mod_colors != "gray")
exprdata[rest_genes]
names(exprdata[rest_genes])
## discard the unassigned genes, and focus on the rest
rest_genes= (dynamic_mod_colors != "gray")
dissTOM1 = 1 - TOMsimilarityFromExpr(exprdata[,rest_genes],
power = softPower)
## Let's plot the tree now.
colnames(dissTOM1) = rownames(dissTOM1) = names(exprdata[rest_genes])
hier_tree = flashClust(as.dist(dissTOM1), method="average" )
plotDendroAndColors(hier_tree,
dynamic_mod_colors[rest_genes],
"Dynamic Tree Cut",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
main = "Gene dendrogram and module colors")
head(mydataf)
exprdata = as.data.frame(t(mydataf[, -c(1:8)]))
names(exprdata) = mydataf$gene_symbol
rownames(exprdata) = names(mydataf)[-c(1:8)]
## Let us consider a subset of data for this demonstration. We'll use first 500 features.
exprdata <- exprdata[,1:500]
gsg = goodSamplesGenes(exprdata, verbose = 3)
gsg$allOK
trial_powers <- c(c(1:10), seq(from=12, to=20, by=2))
sft_thresh <- pickSoftThreshold (exprdata,
dataIsExpr = TRUE,
powerVector = trial_powers,
corFnc = cor,
corOptions = list(use = 'p'),
networkType = "unsigned")
cat("The best estimate for use is",sft_thresh$powerEstimate,".")
print(sft_thresh$fitIndices)
# Scale-free topology fit index as a function of the soft-thresholding power
p1 <- ggplot(data = as.data.frame(sft_thresh),
aes (x = sft_thresh$fitIndices[,1],
y = (-sign(sft_thresh$fitIndices[,3]) * sft_thresh$fitIndices[,2]),
label = trial_powers)) +
geom_label()+
# the sign expression returns the vector of signs of estimated slopes, multiplied by the correlation coefficient.
labs( x="Soft Threshold (power)",
y="Scale Free Topology Model Fit, signed R^2", title = "Scale Independence", tag = "A")+
theme_classic()+
geom_vline(xintercept = 8, color="red") # Red line corresponds to using an R^2 cut-off
# Mean connectivity as a function of the soft-thresholding power
p2 <- ggplot(data = as.data.frame(sft_thresh),
aes (x = sft_thresh$fitIndices[,1],
y = sft_thresh$fitIndices[,5],
label = trial_powers)) +
geom_label()+
# the sign expression returns the vector of signs of estimated slopes, multiplied by the correlation coefficient.
labs( x="Soft Threshold (power)",
y="Mean Connectivity", title = "Mean Connectivity", tag = "B")+
theme_classic()
plot_grid(p1,p2,ncol=2)
## Now we generate adjacency values and TOM similarity matrices on the basis of selected softpower.
softPower = 7;
#calclute the adjacency matrix
adj= adjacency(exprdata,
type = "unsigned",
power = softPower);
#turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM = TOMsimilarityFromExpr(exprdata,
networkType = "unsigned",
TOMType = "unsigned",
power = softPower);
colnames(TOM) = rownames(TOM) = names(exprdata) # same rows as columns, therefore adjacency.
dissTOM=1-TOM # "distance/ dissimilarity = 1 - similarity"
#hierarchical clustering of the genes based on the TOM dissimilarity measure
library(flashClust)
gene_tree = flashClust(as.dist(dissTOM),
method="average")
#plot the resulting clustering tree (dendrogram)
plot(gene_tree,
xlab="",
sub="",
cex=0.3)
sample_tree <- as.dendrogram(hclust(dist(exprdata), method = "average"))
dplot <- ggdendrogram(data= sample_tree, rotate = FALSE)+
theme_dendro()+
ggtitle("Sample clustering to detect outliers")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Samples")+
geom_label()
print(dplot)
## Set the minimum module size
min_mod_size = 20
## Module identification using dynamic tree cut
dynamic_mods = cutreeDynamic(dendro = gene_tree,
method="tree",
minClusterSize = min_mod_size)
dynamic_mods1 = cutreeDynamic(dendro = gene_tree,
distM = dissTOM,
method="hybrid",
deepSplit = 2,
pamRespectsDendro = FALSE,
minClusterSize = min_mod_size)
## we could highlight module labels and the size(number of nodes) of each module. Label 0 is reserved for unassigned genes that are in essence independent nodes.
table(dynamic_mods)
table(dynamic_mods1)
## we can conveniently assign colors to these labels. "Gray" is assigned to label 0.
dynamic_mod_colors = labels2colors(dynamic_mods)
table(dynamic_mod_colors)
dynamic_mod_colors1 = labels2colors(dynamic_mods1)
table(dynamic_mod_colors1)
## we can conveniently assign colors to these labels. "Gray" is assigned to label 0.
dynamic_mod_colors = labels2colors(dynamic_mods)
table(dynamic_mod_colors)
dynamic_mod_colors1 = labels2colors(dynamic_mods1)
table(dynamic_mod_colors1)
## discard the unassigned genes, and focus on the rest
rest_genes= (dynamic_mod_colors != "gray")
dissTOM1 = 1 - TOMsimilarityFromExpr(exprdata[,rest_genes],
power = softPower)
## Let's plot the tree now.
colnames(dissTOM1) = rownames(dissTOM1) = names(exprdata[rest_genes])
hier_tree = flashClust(as.dist(dissTOM1), method="average" )
plotDendroAndColors(hier_tree,
dynamic_mod_colors[rest_genes],
"Dynamic Tree Cut",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
main = "Gene dendrogram and module colors")
## discard the unassigned genes, and focus on the rest
rest_genes= (dynamic_mod_colors != "grey")
dissTOM1 = 1 - TOMsimilarityFromExpr(exprdata[,rest_genes],
power = softPower)
## Let's plot the tree now.
colnames(dissTOM1) = rownames(dissTOM1) = names(exprdata[rest_genes])
hier_tree = flashClust(as.dist(dissTOM1), method="average" )
plotDendroAndColors(hier_tree,
dynamic_mod_colors[rest_genes],
"Dynamic Tree Cut",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
main = "Gene dendrogram and module colors")
## set the diagonal of the dissimilarity to NA
diag(dissTOM1) = NA;
## Visualize the TOM plot. Raise the dissimilarity matrix to the power of 4 to bring out the module structure
sizeGrWindow(7,7)
TOMplot(dissTOM1, hier_tree, as.character(dynamic_mod_colors[rest_genes]))
module_colors= setdiff(unique(dynamic_mod_colors), "grey")
module_colors= setdiff(unique(dynamic_mod_colors), "grey")
for (color in module_colors){
module = names[which(dynamic_mod_colors == color)]
write.table(module,
paste0("module_",color, ".txt"),
sep="\t",
row.names=FALSE,
col.names=FALSE,
quote=FALSE)
}
module_colors= setdiff(unique(dynamic_mod_colors), "grey")
for (color in module_colors){
module = names(exprdata)[which(dynamic_mod_colors == color)]
write.table(module,
paste0("module_",color, ".txt"),
sep="\t",
row.names=FALSE,
col.names=FALSE,
quote=FALSE)
}
module.order <- unlist(tapply(1:ncol(exprdata),
as.factor(dynamic_mod_colors),
I))
m <- t(t(exprdata[,module.order])/apply(datExpr[,module.order],2,max))
module.order <- unlist(tapply(1:ncol(exprdata),
as.factor(dynamic_mod_colors),
I))
m <- t(t(exprdata[,module.order])/apply(exprdata[,module.order],2,max))
heatmap (t(m),
zlim = c(0,1),
col = gray.colors(100),
Rowv = NA,
Colv = NA,
labRow = NA,
scale = "none",
RowSideColors = dynamicColors[module.order])
module.order <- unlist(tapply(1:ncol(exprdata),
as.factor(dynamic_mod_colors),
I))
m <- t(t(exprdata[,module.order])/apply(exprdata[,module.order],2,max))
heatmap (t(m),
zlim = c(0,1),
col = gray.colors(100),
Rowv = NA,
Colv = NA,
labRow = NA,
scale = "none",
RowSideColors = dynamic_mod_colors[module.order])
MEList <-  moduleEigengenes(exprdata, colors = dynamic_mod_colors)
MEs <- MEList$eigengenes
plotEigengeneNetworks(MEs, "",
marDendro = c(0,4,1,2),
marHeatmap = c(3,4,1,2))
unlink('WGCNA/wgcna_demo_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("BiocManager",
repos='http://cran.us.r-project.org',
dependencies = TRUE)
BiocManager::install("WGCNA")
knitr::opts_chunk$set(echo = TRUE)
install.packages("BiocManager",
repos='http://cran.us.r-project.org',
dependencies = TRUE)
BiocManager::install("WGCNA")
install.packages("ggdendro",
repos='http://cran.us.r-project.org',
dependencies = TRUE)
## Setting options
options(stringsAsFactors = FALSE)
#enableWGCNAThreads() ## Enabling multi-threads in processing.
library(WGCNA)
install.packages("ggdendro", repos = "http://cran.us.r-project.org", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("BiocManager",
repos='http://cran.us.r-project.org',
dependencies = TRUE)
BiocManager::install("WGCNA")
install.packages("ggdendro",
repos='http://cran.us.r-project.org',
dependencies = TRUE)
## Setting options
options(stringsAsFactors = FALSE)
#enableWGCNAThreads() ## Enabling multi-threads in processing.
library(WGCNA)
mydataf <- read.csv("../FemaleLiver-Data/LiverFemale3600.csv", header = TRUE)
colnames(mydataf)
head(mydataf)
## LocusLinkID and ProteomeID are annotations from the said databases
## http://www.ncbi.nlm.nih.gov/LocusLink/
exprdata = as.data.frame(t(mydataf[, -c(1:8)]))
names(exprdata) = mydataf$gene_symbol
rownames(exprdata) = names(mydataf)[-c(1:8)]
## Let us consider a subset of data for this demonstration. We'll use first 500 features.
exprdata <- exprdata[,1:500]
gsg = goodSamplesGenes(exprdata, verbose = 3)
library(WGCNA)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rlang")
library(WGCNA)
library(ggdendro)
library(ggplot2)
library(cowplot)
mydataf <- read.csv("../FemaleLiver-Data/LiverFemale3600.csv", header = TRUE)
colnames(mydataf)
head(mydataf)
## LocusLinkID and ProteomeID are annotations from the said databases
## http://www.ncbi.nlm.nih.gov/LocusLink/
exprdata = as.data.frame(t(mydataf[, -c(1:8)]))
names(exprdata) = mydataf$gene_symbol
rownames(exprdata) = names(mydataf)[-c(1:8)]
## Let us consider a subset of data for this demonstration. We'll use first 500 features.
exprdata <- exprdata[,1:500]
gsg = goodSamplesGenes(exprdata, verbose = 3)
gsg$allOK
trial_powers <- c(c(1:10), seq(from=12, to=20, by=2))
sft_thresh <- pickSoftThreshold (exprdata,
dataIsExpr = TRUE,
powerVector = trial_powers,
corFnc = cor,
corOptions = list(use = 'p'),
networkType = "unsigned")
cat("The best estimate for use is", sft_thresh$powerEstimate, ".")
print(sft_thresh$fitIndices)
# Scale-free topology fit index as a function of the soft-thresholding power
p1 <- ggplot(data = as.data.frame(sft_thresh),
aes (x = sft_thresh$fitIndices[,1],
y = (-sign(sft_thresh$fitIndices[,3]) * sft_thresh$fitIndices[,2]),
label = trial_powers)) +
geom_label()+
# the sign expression returns the vector of signs of estimated slopes, multiplied by the correlation coefficient.
labs( x="Soft Threshold (power)",
y="Scale Free Topology Model Fit, signed R^2", title = "Scale Independence", tag = "A")+
theme_classic()+
geom_vline(xintercept = 8, color="red") # Red line corresponds to using an R^2 cut-off
# Mean connectivity as a function of the soft-thresholding power
p2 <- ggplot(data = as.data.frame(sft_thresh),
aes (x = sft_thresh$fitIndices[,1],
y = sft_thresh$fitIndices[,5],
label = trial_powers)) +
geom_label()+
# the sign expression returns the vector of signs of estimated slopes, multiplied by the correlation coefficient.
labs( x="Soft Threshold (power)",
y="Mean Connectivity", title = "Mean Connectivity", tag = "B")+
theme_classic()
plot_grid(p1,p2,ncol=2)
## Now we generate adjacency values and TOM similarity matrices on the basis of selected softpower.
softPower = 7;
#calclute the adjacency matrix
adj= adjacency(exprdata,
type = "unsigned",
power = softPower);
#turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM = TOMsimilarityFromExpr(exprdata,
networkType = "unsigned",
TOMType = "unsigned",
power = softPower);
colnames(TOM) = rownames(TOM) = names(exprdata) # same rows as columns, therefore adjacency.
dissTOM=1-TOM # "distance/ dissimilarity = 1 - similarity"
#hierarchical clustering of the genes based on the TOM dissimilarity measure
library(flashClust)
gene_tree = flashClust(as.dist(dissTOM),
method="average")
#plot the resulting clustering tree (dendrogram)
plot(gene_tree,
xlab="",
sub="",
cex=0.3)
sample_tree <- as.dendrogram(hclust(dist(exprdata), method = "average"))
dplot <- ggdendrogram(data= sample_tree, rotate = FALSE)+
theme_dendro()+
ggtitle("Sample clustering to detect outliers")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Samples")+
geom_label()
print(dplot)
## Set the minimum module size
min_mod_size = 20
## Module identification using dynamic tree cut
dynamic_mods = cutreeDynamic(dendro = gene_tree,
method="tree",
minClusterSize = min_mod_size)
dynamic_mods1 = cutreeDynamic(dendro = gene_tree,
distM = dissTOM,
method="hybrid",
deepSplit = 2,
pamRespectsDendro = FALSE,
minClusterSize = min_mod_size)
## we could highlight module labels and the size(number of nodes) of each module. Label 0 is reserved for unassigned genes that are in essence independent nodes.
table(dynamic_mods)
table(dynamic_mods1)
## we can conveniently assign colors to these labels. "Grey" is assigned to label 0.
dynamic_mod_colors = labels2colors(dynamic_mods)
table(dynamic_mod_colors)
dynamic_mod_colors1 = labels2colors(dynamic_mods1)
table(dynamic_mod_colors1)
## discard the unassigned genes, and focus on the rest
rest_genes= (dynamic_mod_colors != "grey")
dissTOM1 = 1 - TOMsimilarityFromExpr(exprdata[,rest_genes],
power = softPower)
## Let's plot the tree now.
colnames(dissTOM1) = rownames(dissTOM1) = names(exprdata[rest_genes])
hier_tree = flashClust(as.dist(dissTOM1), method="average" )
plotDendroAndColors(hier_tree,
dynamic_mod_colors[rest_genes],
"Dynamic Tree Cut",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
main = "Gene dendrogram and module colors")
## set the diagonal of the dissimilarity to NA
diag(dissTOM1) = NA;
## Visualize the TOM plot. Raise the dissimilarity matrix to the power of 4 to bring out the module structure
sizeGrWindow(7,7)
TOMplot(dissTOM1, hier_tree, as.character(dynamic_mod_colors[rest_genes]))
module_colors= setdiff(unique(dynamic_mod_colors), "grey")
for (color in module_colors){
module = names(exprdata)[which(dynamic_mod_colors == color)]
write.table(module,
paste0("module_",color, ".txt"),
sep="\t",
row.names=FALSE,
col.names=FALSE,
quote=FALSE)
}
module.order <- unlist(tapply(1:ncol(exprdata),
as.factor(dynamic_mod_colors),
I))
m <- t(t(exprdata[,module.order])/apply(exprdata[,module.order],2,max))
heatmap (t(m),
zlim = c(0,1),
col = gray.colors(100),
Rowv = NA,
Colv = NA,
labRow = NA,
scale = "none",
RowSideColors = dynamic_mod_colors[module.order])
MEList <-  moduleEigengenes(exprdata, colors = dynamic_mod_colors)
MEs <- MEList$eigengenes
plotEigengeneNetworks(MEs, "",
marDendro = c(0,4,1,2),
marHeatmap = c(3,4,1,2))
